from snakemake.utils import min_version

min_version("6.0")


include: "rules/common.smk"


LIBRARY_RUN_FASTQS = organize_fastqs(config)

rearranged_coolers_library_folder = config["rearrange"][
    "rearranged_coolers_library_folder"
]
rearranged_coolers_library_group_folder = config["rearrange"][
    "rearranged_coolers_library_group_folder"
]
rearranged_library_coolers = expand(
    f"{rearranged_coolers_library_folder}/{{library}}.{config['rearrange']['new_assembly_name']}.{{filter_name}}.{min(config['bin']['resolutions'])}.mcool",
    library=LIBRARY_RUN_FASTQS.keys(),
    filter_name=list(config["bin"]["filters"].keys()),
)
rearranged_library_coolers_balanced = expand(
    f"{rearranged_coolers_library_folder}/{{library}}.{config['rearrange']['new_assembly_name']}.{{filter_name}}.{min(config['bin']['resolutions'])}.mcool.{{resolution}}.check",
    library=LIBRARY_RUN_FASTQS.keys(),
    filter_name=list(config["bin"]["filters"].keys()),
    resolution=config["bin"]["resolutions"],
)
resgen_uploads = (
    [f"{clr}_uploaded" for clr in rearranged_library_coolers]
    if config["resgen"]["upload"]
    else []
)


rule default:
    input:
        rearranged_library_coolers,
        resgen_uploads,


module distiller:
    snakefile:
        github("open2c/distiller-sm", path="workflow/Snakefile", branch="master")
    config:
        config


use rule * from distiller as distiller_*


rule rearrange_cooler:
    input:
        mcool=f"{distiller.coolers_library_folder}/{{library}}.{distiller.assembly}.{{filter_name}}.{min(config['bin']['resolutions'])}.mcool",
        view=lambda wildcards: config["rearrange"]["views"][wildcards.library],
    params:
        chunksize=config["rearrange"]["chunksize"],
        new_assembly_name=config["rearrange"]["new_assembly_name"],
        resolutions=" ".join([str(res) for res in config["bin"]["resolutions"]]),
        balance_args=config["rearrange"]["balance_args"],
    threads: 8
    conda:
        "envs/rearrange.yml"
    log:
        f"logs/rearrange/{{library}}.{{filter_name}}.{min(config['bin']['resolutions'])}.log",
    benchmark:
        f"benchmarks/rearrange/{{library}}.{{filter_name}}.{min(config['bin']['resolutions'])}.tsv"
    output:
        mcool=f"{rearranged_coolers_library_folder}/{{library}}.{config['rearrange']['new_assembly_name']}.{{filter_name}}.{min(config['bin']['resolutions'])}.mcool",
    shell:
        """
        for resolution in {params.resolutions}; do \
            cooltools rearrange {input.mcool}::resolutions/$resolution \
            {output.mcool}::resolutions/$resolution --view {input.view} \
            --chunksize {params.chunksize} --assembly {params.new_assembly_name} \
            --mode a \
            >>{log[0]} 2>&1;

            cooler balance {output.mcool}::resolutions/$resolution --force \
            -p {threads} {params.balance_args} \
            >>{log[0]} 2>&1;
        done
        """


use rule resgen_upload_library_group from distiller as resgen_upload_library_rearranged with:
    input:
        mcool=rules.rearrange_cooler.output.mcool,
    log:
        f"logs/resgen_upload_library_rearranged/{{library}}.{config['rearrange']['new_assembly_name']}.{{filter_name}}.{min(config['bin']['resolutions'])}.log",
    output:
        touch(
            f"{rearranged_coolers_library_folder}/{{library}}.{config['rearrange']['new_assembly_name']}.{{filter_name}}.{min(config['bin']['resolutions'])}.mcool_uploaded"
        ),
